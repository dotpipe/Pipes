
 Attribute/Tag   |   Use Case<br>
 -------------------------------------------------------------<br>
 insert............= return ajax call to this id<br>
 ajax..............= calls and returns the value file's output ex: &lt;pipe ajax="foo.bar" query="key0:value0;" insert="someID"&gt;<br>
 callback..........= calls function set as attribute value<br>
 query.............= default query string associated with url ex: &lt;anyTag query="key0:value0;key1:value2;" ajax="page.foo"&gt;<br>
 &lt;download&gt;........= tag for downloading files ex: &lt;download file="foo.zip" directory="/home/bar/"&gt; (needs ending with slash)<br>
 file..............= filename to download<br>
 directory.........= relative or full path of 'file'<br>
 redirect..........= "follow" the ajax call in POST or GET mode ex: &lt;pipe ajax="foo.bar" class="redirect" query="key0:value0;" insert="someID"&gt;<br>
 js................= [Specifically a] Modala key/value pair. Allows access to outside JavaScript files in scope of top nest.<br>
 css...............= [Specifically a] Modala key/value pair. Imports a stylesheet file to the page accessing it.<br>
 &lt;lnk&gt;.............= tag for clickable link &lt;lnk ajax="goinghere.html" query="key0:value0;"&gt;<br>
 &lt;pipe&gt;............= Tag (initializes on DOMContentLoaded Event) ex: &lt;pipe ajax="foo.bar" query="key0:value0;" insert="someID"&gt;<br>
 &lt;dyn&gt;.............= Automatic eventListening tag for onclick="pipes(this)" ex: &lt;dyn ajax="foo.bar" query="key0:value0;" insert="someID"&gt;<br>
 dyn-one...........= Class to stop recurring clicking activities <br>
 plain-text........= Class plain text returned to the insertion point<br>
 plain-html........= Class returns as true HTML<br>
 &lt;timed&gt;...........= Timed result refreshing tags (Keep up-to-date handling on page) ex: &lt;timed ajax="foo.bar" delay="3000" query="key0:value0;" insert="someID"&gt;<br>
 delay.............= delay between &lt;timed&gt; tag refreshes (required for &lt;timed&gt; tag) ex: see &lt;timed&gt;<br>
 &lt;carousel&gt;........= Tag to create a carousel that moves every a timeOut() delay="x" occurs ex: &lt;carousel ajax="foo.bar" file-order="foo.bar;bar.foo;foobar.barfoo" delay="3000" id="thisId" insert="thisId" height="100" width="100" boxes="8" style="height:100;width:800"&gt;<br>
 carousel-ajax.....= Class to create Modala sets for carousel use.<br>
        -images...= Class to use pure images for carousel use.<br>
        -auto-off.= Class to stop carousel from moving (better to create buttons)<br>
        -vert.....= Class to make carousel vertical, instead of horizontal (default)<br>
        -video....= Class to make video carousel<br>
        -audio....= Class to make audio carousel<br>
        -iframe...= Class to make iframe carousel<br>
        -link.....= Class to make link carousel<br>
 boxes.............= &lt;carousel&gt; attribute to request for x boxes for pictures<br>
 file-order........= ajax to these files, iterating [0,1,2,3]%array.length per call (delimited by ';') ex: &lt;pipe query="key0:value0;" file-order="foo.bar;bar.foo;foobar.barfoo" insert="someID"&gt;<br>
 file-index........= counter of which index to use with file-order to go with ajax ex: &lt;pipe ajax="foo.bar" query="key0:value0;" insert="someID"&gt;<br>
 incrIndex.........= increment thru index of file-order (0 moves once) (default: 1) ex: &lt;pipe ajax="foo.bar" class="incrIndex" interval="2" file-order="foo.bar;bar.foo;foobar.barfoo" insert="someID"&gt;<br>
 decrIndex.........= decrement thru index of file-order (0 moves once) (default: 1) ex: &lt;pipe ajax="foo.bar" class="decrIndex" interval="3" file-order="foo.bar;bar.foo;foobar.barfoo" insert="someID"&gt;<br>
 interval..........= Take this many steps when stepping through file-order default = 1<br>
 set-attr..........= attribute to set in target HTML tag ex: &lt;pipe id="thisOrSomeId" class="set-attr" set-attr="value" ajax="foo.bar" query="key0:value0;" insert="thisOrSomeID"&gt;<br>
 mode..............= "POST" or "GET" (default: "POST") ex: &lt;pipe mode="POST" set-attr="value" ajax="foo.bar" query="key0:value0;" insert="thisOrSomeID"&gt;<br>
 pipe..............= creates a listener on the object. use listen="eventType" to relegate.<br>
 multiple..........= states that this object has two or more key/value pairs use: states this is a multi-select form box<br>
 remove............= remove element in tag ex: &lt;anyTag remove="someID;someOtherId;"&gt;<br>
 display...........= toggle visible and invisible of anything in the value ex: &lt;anyTag display="someID;someOtherId;"&gt;<br>
 json..............= returns a JSON file set as value<br>
 headers...........= headers in CSS markup-style-attribute (delimited by '&') &lt;any ajax="foo.bar" headers="foobar:boo&barfoo:barfoo;q:9&" insert="someID"&gt;<br>
 form-class........= class name of devoted form elements<br>
 mouse.............= class name to work thru PipesJS' other attributes on event="mouseover;mouseleave" (example)<br>
 event.............= works with mouse class. Creates eventListener on "insert" Node or current Node with mouse.<br>
 options...........= works with &lt;select&gt; tagName. Key:Value; pairs to setup ad easily roll out multiple selects.<br>
 **** FILTERS are go ahead code usually coded in other languages and just come back with a result. Not wholly different from AJAX. They are general purpose files.<br>
 **** ALL HEADERS FOR AJAX are available. They will use defaults to<br>
 **** go on if there is no input to replace them.